"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_native_1 = require("react-native");
var react_1 = __importDefault(require("react"));
// FIXME: This function is hideous
function double_pascal_case_to_two_words(str) {
    var index;
    var count = 0;
    for (var i = 0; i < str.length; i++) {
        var ch = str.charAt(i);
        if (ch >= 'A' && ch <= 'Z') {
            count++;
        }
        if (count === 2 && !index) {
            index = i;
        }
    }
    if (count === 2) {
        return str.substr(0, index) + ' ' + str.substring(index, str.length);
    }
    else {
        return str;
    }
}
function font_style_generator(font_family, font_weight, font_style) {
    var fontFamily = font_family + "-";
    switch (font_weight) {
        case 'normal':
            fontFamily += 'Regular';
            break;
        case 'bold':
            fontFamily += 'Bold';
            break;
        case '100':
            fontFamily += 'Thin';
            break;
        case '200':
            fontFamily += 'Ultralight';
            break;
        case '300':
            fontFamily += 'Light';
            break;
        case '400':
            fontFamily += 'Regular';
            break;
        case '500':
            fontFamily += 'Medium';
            break;
        case '600':
            fontFamily += 'Semibold';
            break;
        case '700':
            fontFamily += 'Bold';
            break;
        case '800':
            fontFamily += 'Heavy';
            break;
        case '900':
            fontFamily += 'Black';
            break;
        case 'bolder':
        case 'lighter':
        // @ts-ignore
        case 'default':
            fontFamily += 'Regular';
            break;
    }
    if (font_style === 'italic') {
        fontFamily += 'Italic';
    }
    return { fontFamily: fontFamily, fontWeight: 'normal' };
}
var oldRender = react_native_1.Text.render;
var FontManager = /** @class */ (function () {
    function FontManager() {
    }
    FontManager.prototype.init = function () {
        react_native_1.Text.render = this.override;
    };
    FontManager.prototype.override = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        /* FIXME: Determine if this was the correct thing to do
     *   Original code  ->  const origin = oldRender.call(this, ...args);
     *   Used to contain error 'the containing arrow function captures the global'
     *   Therefore swapped it to function instead of arrow to remove global scope
     */
        var origin = oldRender.call.apply(oldRender, __spreadArrays([this], args));
        if (react_native_1.Platform.OS === 'android') {
            if (origin.props.style) {
                var fontWeight = origin.props.style.fontWeight ? origin.props.style.fontWeight : '400';
                var fontStyle = origin.props.style.fontStyle ? origin.props.style.fontStyle : 'normal';
                // HACK: Disabled mutation of fontStyle as is immutable in some libaries
                // origin.props.style.fontStyle = 'normal'
                var fontFamily = origin.props.style.fontFamily ? origin.props.style.fontFamily : 'Roboto';
                return react_1.default.cloneElement(origin, {
                    style: [{}, origin.props.style, font_style_generator(fontFamily, fontWeight, fontStyle)],
                });
            }
            return origin;
        }
        else {
            if (origin.props.style) {
                if (origin.props.style.fontFamily) {
                    var fontFamily = origin.props.style.fontFamily;
                    origin.props.style.fontFamily = double_pascal_case_to_two_words(fontFamily);
                }
            }
            return origin;
        }
    };
    return FontManager;
}());
exports.default = new FontManager();
